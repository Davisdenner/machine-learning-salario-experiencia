# -*- coding: utf-8 -*-
"""experiencia_salario_incompleto ainda

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KErw-ORAqlZjstdaKcrD673kwVQX5XhC

#Análise da relação entre salários e anos de trabalho.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df=pd.read_csv('/content/Salario_dataset_basico.csv')

"""# A tarefa envolve conduzir as seguintes etapas:

- Análise inicial com o Seaborn;
- Construir modelos de regressão linear; e
- Realizar a comparação desses modelos.

"""

df.shape

df.info()

df.head()

df.duplicated()

df.duplicated().sum()

df.drop(columns=['Unnamed: 0'],inplace=True)

df.head()

"""Com o coeficiente de Correlação de Pearson nos permite medir a relação linear entre variáveis, oferecendo uma escala que varia de -1 a 1, que interpretamos conforme sua intensidade e direção:

* -1: indica uma correlação negativa perfeita: à medida que uma variável aumenta, a outra diminui.
* 0: não há relação linear entre as variáveis.
* 1: correlação positiva perfeita: à medida que uma variável aumenta, a outra também aumenta.
"""

corr = df.corr()
corr

corr['Salario']

plt.figure(figsize=(6,4))
plt.scatter(df['AnosExperiencia'], df['Salario'],color='red')
plt.title('Salario vs Experiencia')
plt.xlabel('Anos')
plt.ylabel('Salario')
plt.tight_layout()
plt.show()

px.scatter(df, x = 'AnosExperiencia', y = 'Salario', trendline_color_override="red", trendline = 'ols' )

plt.figure(figsize=(6,4))
sns.heatmap(df[['AnosExperiencia', 'Salario']].corr(), annot=True, cmap='coolwarm')
plt.title('Correlação - Mapa de calor')
plt.show()

"""### Separando em treino e teste"""

from sklearn.model_selection import train_test_split

# Definindo y e X

y = df['Salario']
X = df.drop(columns = 'Salario')

#Aplicando o split do y e X
train_test_split(X, y, test_size = 0.3, random_state= 750)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state= 230)

#Dados de treino para usar a fórmula

df_train = pd.DataFrame(data= X_train)
df_train['Salario'] = y_train

# import ols
from statsmodels.formula.api import ols

# ajustando o primeiro modelo
modelo_0 = ols('Salario~AnosExperiencia', data = df_train).fit()

# visualizando os parametros
modelo_0.params

# o resumo do nosso modelo
print(modelo_0.summary())

# observando o R²
modelo_0.rsquared

# definindo o Y previsto
y_predict = modelo_0.predict(X_test)

# importando o r2_score
from sklearn.metrics import r2_score

# printando o r²
print("R²: ", r2_score(y_test,y_predict))









